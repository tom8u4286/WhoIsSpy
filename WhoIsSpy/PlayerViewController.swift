//
//  PlayerViewController.swift
//  WhoIsSpy
//
//  Created by Êõ≤Â•ïÂ∏Ü on 2021/4/22.
//

import UIKit
import Firebase

class PlayerViewController: UIViewController {

    @IBOutlet var playerNameField: UITextField!
    @IBOutlet var roomIdField: UITextField!
    @IBOutlet var spinner: UIActivityIndicatorView!
    @IBOutlet var chooseYourEmojiLabel: UILabel!
    
    
    @IBOutlet var EmojiButtonCollection: [UIButton]!
    
    
    
    @IBOutlet var enterButton: UIButton!
    @IBOutlet var sameNameHintLabel: UILabel!
    @IBOutlet var roomNotExistHintLabel: UILabel!
    @IBOutlet var playerEmojiLabel: UILabel!
    
    var playerEmoji = "üòÉ"{
        didSet{
            playerEmojiLabel.text = playerEmoji
        }
    }
    var playerName = ""
    var roomId = ""
    var gameRoomsDB = Firestore.firestore().collection("GameRooms")
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Áé©ÂÆ∂"
        navigationController?.setNavigationBarHidden(false, animated: true)
    }
    
    override func shouldPerformSegue(withIdentifier identifier: String, sender: Any?) -> Bool {
        if identifier == "playerEnterRoom"{
            playerName = playerNameField.text!
            roomId = roomIdField.text!
            if checkFieldsValid(){
                spinner.startAnimating()
                allowedToEnter()
            }
        }
        return false
    }
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier ==  "playerEnterRoom" {
            let controller = segue.destination as! PlayerRoomViewController
            controller.playerName = playerName
            controller.playerEmoji = playerEmoji
            controller.title = roomId
            
            //ÁõÆÂâçË®≠Ë®àÁÇ∫Á¨¨‰∏ÄÈöéCollectionÁÇ∫roomÁöÑÂêçÁ®±(roomId)
            //4.29‰πãÂæåË®≠Ë®àÁÇ∫CollectionÂè™Á®±ÁÇ∫GameRoomsÔºådocumentÂêçÁ®±ÁÇ∫RoomÊàøÂêç
            let dic = ["emoji": playerEmoji, "word": "", "connected": true] as [String: Any]
            let data = ["\(playerName)": dic]
            
            sendData(to: gameRoomsDB.document("\(roomId)"), data, merge: true)
        }
    }

    @IBAction func emojiButtonAction(_ sender: UIButton) {
        playerEmoji = sender.title(for: .normal)!
        for button in EmojiButtonCollection{ button.backgroundColor = .none }
        sender.backgroundColor = .lightGray
    }
    func allowedToEnter(){
        //Ê≠§allowedToEnter()Ê™¢Êü•‰∏â‰ª∂‰∫ã 1.ÊàøÈñìÊòØÂê¶Â∑≤Â≠òÂú® 2.ÈÅäÊà≤ÊòØÂê¶Â∑≤Á∂ìÈñãÂßã 3.‰ΩøÂê¶ÊúâÂêåÂêçÁé©ÂÆ∂
        self.sameNameHintLabel.isHidden = true
        self.roomNotExistHintLabel.isHidden = true
        
        let docRef = gameRoomsDB.document("\(roomId)")
        docRef.getDocument { (document, error) in
            guard let document = document else {return}
            
            //1.Ê™¢Êü•ÊàøÈñìÊòØÂê¶Â≠òÂú®ÔºåÂç≥‰∏ªÊåÅ‰∫∫ÊòØÂê¶Â∑≤Á∂ìÈñãÊàø
            if ((document.exists) == true) {
                let hostData = document.data()?["host"] as! [String : Any]
                //2.Ê™¢Êü•ÈÅäÊà≤ÊòØÂê¶Â∑≤Á∂ìÈñãÂßãÔºåÂ¶ÇÊûúÂ∑≤Á∂ìÈñãÂßãÔºåÂâáÁé©ÂÆ∂‰∏çÂÖÅË®±ÈÄ≤ÂÖ•ÊàøÈñì
                let gameIsOnData = hostData["gameIsOn"] as! Bool
                if !gameIsOnData{
                    
                    //3.Ê™¢Êü•ÊòØÂê¶ÊúâÁé©ÂÆ∂ÂêçÁ®±Áõ∏ÂêåÔºåÂ¶ÇÊûúÂ∑≤Á∂ìÊúâÁõ∏ÂêåÂêçÁ®±ËÄÖ(ÂåÖÂê´host)ÔºåÂâáÁé©ÂÆ∂‰∏çÂÖÅË®±ÈÄ≤ÂÖ•ÊàøÈñì
                    let playerList = document.data()?.keys
                    if !(playerList?.contains(self.playerName) ?? true){
                        //TODO: ÈÄôÁ®ÆÁõ¥Êé•performSegueÁöÑ‰ΩúÊ≥ïÂèØËÉΩ‰∏çÊòØÂæàÂ•ΩÔºåÊé•‰∏ã‰æÜÂæÖÊîπÈÄ≤
                        //ÈÄôÈÇäÂ¶ÇÊûúÁî®return trueÁöÑÊñπÂºèÔºåÁî±ÊñºgetDocumentË¶ÅËÄóÊôÇ(async)
                        //Âú®ÈÇÑÊ≤íÂèñÂæófirebase document‰πãÂâçÔºåfunctionÂ∞±Áõ¥Êé•ÂÖàreturn false‰∫ÜÔºå
                        //ÊâÄ‰ª•Ê∞∏ÈÅ†‰∏çÊúÉÂü∑Ë°åprepare() (Ê∞∏ÈÅ†‰∏çÊúÉÂü∑Ë°åSegue)
                        print("‚úÖ PlayerVC.allowedToEnter(): Allowed to enter the room.")
                        
                        self.performSegue(withIdentifier: "playerEnterRoom", sender: nil)
                    }else{
                        self.errorAnimation(field: self.playerNameField)
                        self.sameNameHintLabel.isHidden = false
                        print("‚ö†Ô∏è PlayerVC.allowedToEnter(): Got same player name in room. Change a name to enter.")
                    }
                }else{
                    let ac = UIAlertController(title: "ÈÅäÊà≤ÈÄ≤Ë°å‰∏≠", message: "Êö´ÊôÇÁÑ°Ê≥ïÈÄ≤ÂÖ•ÊàøÈñìÔºåË´ãÁ®çÂæåÔºÅ", preferredStyle: .alert)
                    ac.addAction(UIAlertAction(title: "Á¢∫ÂÆö", style: .default, handler: {_ in }))
                    self.present(ac, animated: true)
                    print("‚ö†Ô∏è PlayerVC.allowedToEnter(): The game is in progress. The player shall wait.")
                }
            }else{
                self.roomNotExistHintLabel.isHidden = false
                self.errorAnimation(field: self.roomIdField)
                print("‚ö†Ô∏è PlayerVC.allowedToEnter(): room doesn't exist!")
            }
            self.spinner.stopAnimating()
        }
    }
    
    func checkFieldsValid() -> Bool{
        if playerNameField.text == ""{ errorAnimation(field: playerNameField)}
        if roomIdField.text == ""{ errorAnimation(field: roomIdField)}
        if playerNameField.text != "" && roomIdField.text != ""{ return true }
        return false
    }
    
    func errorAnimation(field: UIView){
        field.backgroundColor = UIColor(red: 255/255, green: 174/255, blue: 185/255, alpha: 1)
        UIView.animate(withDuration: 3){ field.backgroundColor = .white }
    }
    
    func sendData(to docRef: DocumentReference, _ data: [String: Any], merge: Bool){
        docRef.setData(data, merge: merge){ error in
            if let error = error{
                print("‚ö†Ô∏è PlayerViewController.sendData(): Got an error sending data: \(error.localizedDescription)")
            }
        }
    }
}
